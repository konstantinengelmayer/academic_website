<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Data Analysis on Konstantin Engelmayer</title>
        <link>https://demo.stack.jimmycai.com/categories/data-analysis/</link>
        <description>Recent content in Data Analysis on Konstantin Engelmayer</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 16 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://demo.stack.jimmycai.com/categories/data-analysis/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Assignment 04 - Data analysis</title>
        <link>https://demo.stack.jimmycai.com/p/assignment-04-data-analysis/</link>
        <pubDate>Thu, 16 Nov 2023 00:00:00 +0000</pubDate>
        
        <guid>https://demo.stack.jimmycai.com/p/assignment-04-data-analysis/</guid>
        <description>&lt;hr&gt;
&lt;h2 id=&#34;unmarked-assignment-cleaning-crops&#34;&gt;Unmarked Assignment: Cleaning Crops&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;In this assignment we read and clean our data to prepare it for data
analysis. First we take a look at the data:
&lt;img src=&#34;https://demo.stack.jimmycai.com/../../data/feldfruechte.png&#34;
	
	
	
	loading=&#34;lazy&#34;
	
		alt=&#34;Feldfruechte&#34;
	
	
&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-problems-to-solve&#34;&gt;1. Problems to solve&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Skip first 6 and last 5 rows of the file&lt;/li&gt;
&lt;li&gt;Set right encoding to read Umlaute properly&lt;/li&gt;
&lt;li&gt;Read file with the first 3 column names missing&lt;/li&gt;
&lt;li&gt;Identify the missing values and replace them with NA&lt;/li&gt;
&lt;li&gt;Divide column 3 into 3 different columns&lt;/li&gt;
&lt;li&gt;Fill up the 3 different columns with missing information like “Land”
and “Landkreis”&lt;/li&gt;
&lt;li&gt;Set a new order of the columns and sort the data frame by id and
year&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-problem-solving&#34;&gt;2. Problem solving&lt;/h3&gt;
&lt;p&gt;We try to read the data for the first time. Also we save &lt;code&gt;nrow(data)&lt;/code&gt; so
that we know how many rows there are in the data frame to skip the last
5.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data &amp;lt;- read.csv2(file = &amp;quot;../../data/115-46-4_feldfruechte.txt&amp;quot;, header = TRUE, skip = 6, encoding = &#39;latin1&#39;, col.names = c(&amp;quot;Year&amp;quot;, &amp;quot;ID&amp;quot;, &amp;quot;Location&amp;quot;, &amp;quot;Winter_Wheat&amp;quot;, &amp;quot;Rye_and_Winter_Mixed_Grain&amp;quot;, &amp;quot;Winter_Barley&amp;quot;, &amp;quot;Spring_Barley&amp;quot;, &amp;quot;Oats&amp;quot;, &amp;quot;Triticale&amp;quot;, &amp;quot;Potatoes&amp;quot;, &amp;quot;Sugar_Beets&amp;quot;, &amp;quot;Winter_Rapeseed&amp;quot;, &amp;quot;Silage_Maize&amp;quot;))
nrows &amp;lt;- nrow(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can open the data view tool of r studio and sort the column by
their values to find the &lt;code&gt;na.strings&lt;/code&gt;. There you will find “.”, “-” and
“/”. Now we read the data again. With &lt;code&gt;str(data)&lt;/code&gt; we check if r read the
data correctly.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data &amp;lt;- read.csv2(file = &amp;quot;../../data/115-46-4_feldfruechte.txt&amp;quot;, header = TRUE, skip = 6, encoding = &#39;latin1&#39;, na.string = c(&amp;quot;.&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;/&amp;quot;), nrows = nrows - 5, col.names = c(&amp;quot;Year&amp;quot;, &amp;quot;ID&amp;quot;, &amp;quot;Location&amp;quot;, &amp;quot;Winter_Wheat&amp;quot;, &amp;quot;Rye_and_Winter_Mixed_Grain&amp;quot;, &amp;quot;Winter_Barley&amp;quot;, &amp;quot;Spring_Barley&amp;quot;, &amp;quot;Oats&amp;quot;, &amp;quot;Triticale&amp;quot;, &amp;quot;Potatoes&amp;quot;, &amp;quot;Sugar_Beets&amp;quot;, &amp;quot;Winter_Rapeseed&amp;quot;, &amp;quot;Silage_Maize&amp;quot;))
str(data)

## &#39;data.frame&#39;:    8925 obs. of  13 variables:
##  $ Year                      : int  2015 2015 2015 2015 2015 2015 2015 2015 2015 2015 ...
##  $ ID                        : chr  &amp;quot;DG&amp;quot; &amp;quot;01&amp;quot; &amp;quot;01001&amp;quot; &amp;quot;01002&amp;quot; ...
##  $ Location                  : chr  &amp;quot;Deutschland&amp;quot; &amp;quot;  Schleswig-Holstein&amp;quot; &amp;quot;      Flensburg, Kreisfreie Stadt&amp;quot; &amp;quot;      Kiel, Landeshauptstadt, Kreisfreie Stadt&amp;quot; ...
##  $ Winter_Wheat              : num  81.5 100.3 94 99.2 99.5 ...
##  $ Rye_and_Winter_Mixed_Grain: num  56.6 79 0 73.9 84.7 79.7 87.5 76.9 79.6 77.4 ...
##  $ Winter_Barley             : num  76.9 101.7 94.5 100.7 116.8 ...
##  $ Spring_Barley             : num  54.2 59.1 0 0 0 0 0 0 0 0 ...
##  $ Oats                      : num  45.1 60.5 0 0 0 0 0 0 0 0 ...
##  $ Triticale                 : num  64.7 80.4 0 0 0 0 0 0 0 0 ...
##  $ Potatoes                  : num  438 420 0 0 0 ...
##  $ Sugar_Beets               : num  722 716 0 701 661 ...
##  $ Winter_Rapeseed           : num  39.1 42.6 41.1 45.1 44.8 36 44.1 40 42.7 45.2 ...
##  $ Silage_Maize              : num  414 406 390 450 465 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;read.csv2()&lt;/code&gt; reads files with following default settings (e.g
seperator = “,”, dec = “,”)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skip = 6&lt;/code&gt; skips the first 6 rows&lt;/li&gt;
&lt;li&gt;&lt;code&gt;na.strings = c(&amp;quot;.&amp;quot;, &amp;quot;-&amp;quot;, &amp;quot;/&amp;quot;)&lt;/code&gt; replaces missing values with NA´s&lt;/li&gt;
&lt;li&gt;setting the column names while reading the data prevents error while
reading the data with 3 missing column names&lt;/li&gt;
&lt;li&gt;&lt;code&gt;encoding = &#39;latin1&#39;&lt;/code&gt; allows Umlaute&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nrows = nrows - 5&lt;/code&gt;ignores the last 5 rows&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we have to divide the third column into 3. We want one column to
contain the name of the place. The second column should contain
information about the administrative unit. The third column should
contain additional information like “Hansestadt”. For that we create 2
new empty rows. To dived the column we use the
&lt;code&gt;clean_administrativ_area()&lt;/code&gt; function, we created in the
function-script. Lastly we set the column in the right order and sort
the rows by the ID and year.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;source(&amp;quot;functions.R&amp;quot;)
data$administrative_unit &amp;lt;- NA
data$additional_info &amp;lt;- NA
data &amp;lt;- cleaning_administrativ_area(data, data$Location)
data &amp;lt;- data[,c(2,1,3,14,15,4,5,6,7,8,9,10,11,12,13)]
data &amp;lt;- data[order(data$ID,data$Year), ]
rownames(data) &amp;lt;- 1:nrow(data)
&lt;/code&gt;&lt;/pre&gt;
&lt;details&gt;
&lt;summary&gt;
Click here to view the code for the
&lt;code&gt;cleaning\_administrative\_area()&lt;/code&gt; -function
&lt;/summary&gt;
&lt;pre&gt;&lt;code&gt;#A function to clean administrative area data in a data frame
cleaning_administrativ_area &amp;lt;- function(dataframe, column){
  
  # Split the specified column on commas
  split_data &amp;lt;- strsplit(column, &amp;quot;,&amp;quot;)
  
  #create a matrix out of the split_data
  extracted &amp;lt;- t(sapply(split_data, function(x) x[1:3]))
  
  # Convert the matrix to a data frame
  df &amp;lt;- as.data.frame(extracted)
  names(df) &amp;lt;- c(&amp;quot;one&amp;quot;, &amp;quot;two&amp;quot;, &amp;quot;three&amp;quot;)

  
  # Identify rows where the third column is not NA for swapping
  swap_idx &amp;lt;- !is.na(df$three)
  
  # Perform the swap of &#39;two&#39; and &#39;three&#39; where the third column is not NA
  temp &amp;lt;- df$two[swap_idx]
  df$two[swap_idx] &amp;lt;- df$three[swap_idx]
  df$three[swap_idx] &amp;lt;- temp
  
  # Fill missing values in &#39;two&#39; based on how far the place is idented
  df$two[is.na(df$two) &amp;amp; regexpr(&amp;quot;\\S&amp;quot;, df$one)==1] &amp;lt;- &amp;quot;Land&amp;quot;
  df$two[is.na(df$two) &amp;amp; regexpr(&amp;quot;\\S&amp;quot;, df$one)==3] &amp;lt;- &amp;quot;Bundesland&amp;quot;
  df$two[is.na(df$two) &amp;amp; regexpr(&amp;quot;\\S&amp;quot;, df$one)==7] &amp;lt;- &amp;quot;Landkreis&amp;quot;
  
  # Trim leading whitespace from &#39;one&#39;, &#39;two&#39;, and &#39;three&#39;
  df$one &amp;lt;- sub(&amp;quot;^\\s+&amp;quot;, &amp;quot;&amp;quot;, df$one)
  df$two &amp;lt;- sub(&amp;quot;^\\s+&amp;quot;, &amp;quot;&amp;quot;, df$two)
  df$three &amp;lt;- sub(&amp;quot;^\\s+&amp;quot;, &amp;quot;&amp;quot;, df$three)
  
  # Update the original dataframe with the new columns
  dataframe$Location &amp;lt;- df$one
  dataframe$administrative_unit &amp;lt;- df$two
  dataframe$additional_info &amp;lt;- df$three
  
  # Return the modified dataframe
  return(dataframe)
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-resulting-data-frame&#34;&gt;3. Resulting data frame&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;head(data)

##   ID Year           Location administrative_unit additional_info Winter_Wheat
## 1 01 1999 Schleswig-Holstein          Bundesland            &amp;lt;NA&amp;gt;         91.9
## 2 01 2000 Schleswig-Holstein          Bundesland            &amp;lt;NA&amp;gt;         96.5
## 3 01 2001 Schleswig-Holstein          Bundesland            &amp;lt;NA&amp;gt;         98.4
## 4 01 2002 Schleswig-Holstein          Bundesland            &amp;lt;NA&amp;gt;         81.6
## 5 01 2003 Schleswig-Holstein          Bundesland            &amp;lt;NA&amp;gt;         86.4
## 6 01 2004 Schleswig-Holstein          Bundesland            &amp;lt;NA&amp;gt;         90.7
##   Rye_and_Winter_Mixed_Grain Winter_Barley Spring_Barley Oats Triticale Potatoes
## 1                       67.6          86.8          56.3 59.2      67.2    376.6
## 2                       67.1          81.7          54.9 53.7      71.4    379.6
## 3                       73.2          87.2          49.6 56.1      77.4    370.4
## 4                       64.9          74.4          44.4 50.2      67.2    328.9
## 5                       67.1          79.6          53.0 61.7      73.2    347.7
## 6                       69.7          84.4          51.3 61.4      72.6    402.0
##   Sugar_Beets Winter_Rapeseed Silage_Maize
## 1       543.7            39.7        378.4
## 2       555.3            39.5        356.8
## 3       538.3            41.1        385.1
## 4       533.7            32.0        372.3
## 5       546.3            37.9        343.9
## 6       572.1            44.2        354.5
&lt;/code&gt;&lt;/pre&gt;
</description>
        </item>
        <item>
        <title>Assignment 03 - Data analysis</title>
        <link>https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/</link>
        <pubDate>Sun, 12 Nov 2023 00:00:00 +0000</pubDate>
        
        <guid>https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/</guid>
        <description>&lt;hr&gt;
&lt;h2 id=&#34;marked-assignment-read-and-plot&#34;&gt;Marked Assignment: Read and Plot&lt;/h2&gt;
&lt;hr&gt;
&lt;h3 id=&#34;1-task&#34;&gt;1. Task&lt;/h3&gt;
&lt;h4 id=&#34;read-the-data-provided-in-the-excel-file-and-isolate-the-tabulated-information-into-a-dataframe-class&#34;&gt;Read the data provided in the Excel file and “isolate” the tabulated information into a data.frame class.&lt;/h4&gt;
&lt;p&gt;First we take a look at the data:
&lt;img src=&#34;https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/Hessen_holzeinschlag.PNG&#34;
	width=&#34;1018&#34;
	height=&#34;547&#34;
	srcset=&#34;https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/Hessen_holzeinschlag_hue53a5778251d899c341d9e4ded20eb5e_36748_480x0_resize_box_3.PNG 480w, https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/Hessen_holzeinschlag_hue53a5778251d899c341d9e4ded20eb5e_36748_1024x0_resize_box_3.PNG 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;HessenHolzeinschlag&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;186&#34;
		data-flex-basis=&#34;446px&#34;
	
&gt;&lt;/p&gt;
&lt;p&gt;We need to read the data with &lt;code&gt;;&lt;/code&gt; as separator and skip the first 4 and
the last line of the .txt. Also we set year 2010 to 2014 of colored
woods to NA, because they were counted as beechs since 2010.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;data &amp;lt;- read.table(file = &amp;quot;../../data/hessen_holzeinschlag_1997-2014.csv&amp;quot;, 
                    header = TRUE, skip =4, sep = &amp;quot;;&amp;quot;,     nrow = 18)
colnames(data) &amp;lt;- c(&amp;quot;Year&amp;quot;, &amp;quot;Oak&amp;quot;, &amp;quot;Beech&amp;quot;, &amp;quot;ColoredWoods&amp;quot;, &amp;quot;Spruce&amp;quot;, &amp;quot;Pine&amp;quot;, &amp;quot;Total&amp;quot;)
data[which(data$Year&amp;gt; 2009),4] &amp;lt;- NA
print(data)

##    Year Oak Beech ColoredWoods Spruce Pine Total
## 1  1997 155  1036           21   1684  779  3675
## 2  1998 265  1631           36   1761  951  4644
## 3  1999 278  1796           32   1732  914  4752
## 4  2000 204  1300            0   1024  616  3144
## 5  2001 322  1515            0   1592  706  4135
## 6  2002 265  1410            0   2036  663  4374
## 7  2003 404  1698            0   2482  820  5404
## 8  2004 400  1572            0   2775  757  5504
## 9  2005 370  1489            0   2601  887  5347
## 10 2006 388  1881            0   2580  844  5693
## 11 2007 271  1816            0   6524  782  9393
## 12 2008 292  1721            0   3698  661  6372
## 13 2009 135  1149            0   1926  534  3744
## 14 2010 223  1733           NA   3201  807  5964
## 15 2011 297  1908           NA   2018  829  5052
## 16 2012 281  1821           NA   1685  777  4564
## 17 2013 284  1821           NA   1721  813  4639
## 18 2014 285  1911           NA   1704  805  4705
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h3 id=&#34;2-task&#34;&gt;2. Task&lt;/h3&gt;
&lt;h4 id=&#34;create-a-simple-visualization-which-gives-a-quick-temporally-non-explicit-and-descriptive-statistical-overview-of-the-harvest-by-tree-type-and-as-a-total-over-all-trees-iea-similar-kind-of-information-as-provided-by-the-summary-function&#34;&gt;Create a simple visualization which gives a quick, temporally non explicit and descriptive statistical overview of the harvest by tree type and as a total over all trees (i.e. a similar kind of information as provided by the summary function).&lt;/h4&gt;
&lt;p&gt;I want to create a box plot with the ggplot2 package, grouped by the
different tree types. To do that we first need to transform the data
frame from the wide to a long format. For that we can use the tidyr
package.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(tidyr)

data_long &amp;lt;- pivot_longer(data, cols = -Year, names_to = &amp;quot;TreeType&amp;quot;, values_to = &amp;quot;Volume&amp;quot;)
head(data_long, n = 12)

## # A tibble: 12 × 3
##     Year TreeType     Volume
##    &amp;lt;int&amp;gt; &amp;lt;chr&amp;gt;         &amp;lt;int&amp;gt;
##  1  1997 Oak             155
##  2  1997 Beech          1036
##  3  1997 ColoredWoods     21
##  4  1997 Spruce         1684
##  5  1997 Pine            779
##  6  1997 Total          3675
##  7  1998 Oak             265
##  8  1998 Beech          1631
##  9  1998 ColoredWoods     36
## 10  1998 Spruce         1761
## 11  1998 Pine            951
## 12  1998 Total          4644
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can create the box plot and group it by the tree type.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;library(ggplot2)

ggplot(data_long, aes(x = TreeType, y = Volume, group = TreeType)) +
  geom_boxplot(outlier.shape = NA) +
  geom_jitter(width = 0.2) +         
  theme_minimal()+
  labs(x = &amp;quot;Tree Type&amp;quot;, y = expression(Volume~&amp;quot;[1000&amp;quot;~m^3~&amp;quot;]&amp;quot;), 
       title = &amp;quot;Boxplot of Volume by Tree Type in 1000 cubic meter&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/unnamed-chunk-4-1.png&#34;
	width=&#34;672&#34;
	height=&#34;480&#34;
	srcset=&#34;https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/unnamed-chunk-4-1_hu5442636b1c46059e1aa4e34b8c04de0f_7171_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/unnamed-chunk-4-1_hu5442636b1c46059e1aa4e34b8c04de0f_7171_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Plot1&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;336px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;3-task&#34;&gt;3. Task&lt;/h3&gt;
&lt;h4 id=&#34;create-another-visualization-which---in-the-same-figure-panel---shows-how-each-beech-harvest-over-the-time-span-is-related-to-each-of-the-oak-pine-spruce-and-colored-wood-harvests-in-a-2-by-2-grid-iearrange-the-figures-in-a-2-columns-and-2-rows-layout&#34;&gt;Create another visualization which - in the same figure panel - shows how each beech harvest over the time span is related to each of the oak, pine, spruce and colored wood harvests in a 2 by 2 grid (i.e. arrange the figures in a 2 columns and 2 rows layout).&lt;/h4&gt;
&lt;p&gt;This time we will use base R to create the plots. First we create a
Layout to arrange to plots in a 2x2 grid, but also add a third row for
the legend (so technicly a 2x3 grid). For that we use the
layout-function. Inside that function we create a matrix to create
different cells for the layout. Because the whole last row should
contain the legend we count from 1 to 5 and count 5 two times. We define
the number of rows and columns of the layout and adjust the heights of
the different rows. Then we can create the plots inside of the layout.
At the end we add the legend to the last row.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;layout(matrix(c(1, 2, 3, 4, 5, 5), 3, 2, byrow = TRUE), heights = c(2, 2, 0.25))

line_types &amp;lt;- c(&amp;quot;solid&amp;quot;, &amp;quot;dotted&amp;quot;, &amp;quot;dashed&amp;quot;, &amp;quot;dotdash&amp;quot;, &amp;quot;longdash&amp;quot;)

plot(data$Year, data$Beech, type = &amp;quot;l&amp;quot;, lty = line_types[1], ylim = c(0, 2000),
     xlab = &amp;quot;Year&amp;quot;, ylab = expression(Volume~&amp;quot;[1000&amp;quot;~m^3~&amp;quot;]&amp;quot;), main = &amp;quot;Beech and Oak Volume Over Years&amp;quot;)
lines(data$Year, data$Oak, lty = line_types[2])

plot(data$Year, data$Beech, type = &amp;quot;l&amp;quot;, lty = line_types[1], ylim = c(0, 2000), 
     xlab = &amp;quot;Year&amp;quot;, ylab = expression(Volume~&amp;quot;[1000&amp;quot;~m^3~&amp;quot;]&amp;quot;), main = &amp;quot;Beech and Colored Woods Volume Over Years&amp;quot;)
lines(data$Year, data$ColoredWoods,
      lty = line_types[3])


plot(data$Year, data$Beech, type = &amp;quot;l&amp;quot;, lty = line_types[1], ylim = c(0, 7000),
     xlab = &amp;quot;Year&amp;quot;, ylab = expression(Volume~&amp;quot;[1000&amp;quot;~m^3~&amp;quot;]&amp;quot;), main = &amp;quot;Beech and Spruce Volume Over Years&amp;quot;)
lines(data$Year, data$Spruce, lty = line_types[4])


plot(data$Year, data$Beech, type = &amp;quot;l&amp;quot;, lty = line_types[1], ylim = c(0, 2000),
     xlab = &amp;quot;Year&amp;quot;, ylab = expression(Volume~&amp;quot;[1000&amp;quot;~m^3~&amp;quot;]&amp;quot;), main = &amp;quot;Beech and Pine Volume Over Years&amp;quot;)
lines(data$Year, data$Pine, lty = line_types[5])


par(mar = c(0, 0, 0, 0))


plot.new()
legend(&amp;quot;bottom&amp;quot;, inset = c(0, -0.2), legend = c(&amp;quot;Beech&amp;quot;, &amp;quot;Oak&amp;quot;, &amp;quot;Colored Woods&amp;quot;, &amp;quot;Spruce&amp;quot;, &amp;quot;Pine&amp;quot;), 
       bty = &amp;quot;n&amp;quot;,title = NA, 
       lty = c(line_types[1], line_types[2], line_types[3], line_types[4], line_types[5]), 
       horiz = TRUE)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/unnamed-chunk-5-1.png&#34;
	width=&#34;672&#34;
	height=&#34;480&#34;
	srcset=&#34;https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/unnamed-chunk-5-1_hufe1403fcd70b4bdebdb2987e3e41003d_8820_480x0_resize_box_3.png 480w, https://demo.stack.jimmycai.com/p/assignment-03-data-analysis/unnamed-chunk-5-1_hufe1403fcd70b4bdebdb2987e3e41003d_8820_1024x0_resize_box_3.png 1024w&#34;
	loading=&#34;lazy&#34;
	
		alt=&#34;Plot2&#34;
	
	
		class=&#34;gallery-image&#34; 
		data-flex-grow=&#34;140&#34;
		data-flex-basis=&#34;336px&#34;
	
&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&#34;4-task&#34;&gt;4. Task&lt;/h3&gt;
&lt;h4 id=&#34;include-your-opinion-on-what-could-be-the-key-message-of-these-figures-in-two-sentence-max&#34;&gt;Include your opinion on what could be the key message of these figures in two sentence max.&lt;/h4&gt;
&lt;p&gt;The data shows a notable decrease in spruce harvest volumes in 2007, a
result of its vulnerability to factors such as the Kyrill storm, bark
beetle infestations, and elevated temperatures. In contrast, other nativ
tree species did not exhibit a similar increase in harvest volume that
year, underscoring the importance of tailoring forest management to the
unique responses of different species to environmental stressors and climate change.&lt;/p&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Assignment 02 - Data analysis</title>
        <link>https://demo.stack.jimmycai.com/p/assignment-02-data-analysis/</link>
        <pubDate>Tue, 07 Nov 2023 00:00:00 +0000</pubDate>
        
        <guid>https://demo.stack.jimmycai.com/p/assignment-02-data-analysis/</guid>
        <description>&lt;hr&gt;
&lt;h2 id=&#34;unmarked-assignment-loop-and-conquer&#34;&gt;Unmarked Assignment: Loop and Conquer&lt;/h2&gt;
&lt;hr&gt;
&lt;h4 id=&#34;1-implement-an-if-then-else-statement-which-prints-larger-if-the-number-provided-as-variable-n-is-larger-than-three-and-equal-or-smaller-otherwise&#34;&gt;1. Implement an if-then-else statement which prints “larger” if the number provided as variable n is larger than three and “equal or smaller” otherwise.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;check_value &amp;lt;- function(n){
  if(n &amp;gt;3){
    print(&amp;quot;large&amp;quot;)
  }else{
    print(&amp;quot;equal or smaller&amp;quot;)
  }
}
check_value(2)

[1] &amp;quot;equal or smaller&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-extent-a-copy-of-the-above-statement-iecopy-the-entire-if-then-else-statement-and-include-it-a-second-time-in-your-script-in-order-to-preserve-both-versions-which-returns-equal-and-smaller-explicitly-in-addition-to-larger&#34;&gt;2. Extent a copy of the above statement (i.e. copy the entire if-then-else statement and include it a second time in your script in order to preserve both versions) which returns “equal” and “smaller” explicitly in addition to “larger”.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;check_value &amp;lt;- function(n){
  if(n &amp;gt;3){
    print(&amp;quot;large&amp;quot;)
  }else if(n == 3){
    print(&amp;quot;equal&amp;quot;)
  }else if(n &amp;lt;3){
    print(&amp;quot;smaller&amp;quot;)
  }
}
check_value(2)

[1] &amp;quot;smaller&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;3-implement-a-if-then-else-statement-which-prints-even-if-the-number-provided-as-variable-n-is-even-and-which-prints-odd-otherwise&#34;&gt;3. Implement a if-then-else statement which prints “even” if the number provided as variable n is even and which prints “odd” otherwise.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;even_or_odd &amp;lt;- function(n){
  if(n %% 2 == 0){
    print(&amp;quot;even&amp;quot;)
  }else{
    print(&amp;quot;odd&amp;quot;)
  }
}
even_or_odd(5)

[1] &amp;quot;odd&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;4-copy-the-extended-largerequalsmaller-if-then-else-statement-and-include-it-into-a-for-loop-which-shows-that-all-three-options-are-actually-implemented-in-a-correct-manner-by-iterating-over-n-from-a-number-which-is-smaller-3-exactly-3-and-larger-than-3&#34;&gt;4. Copy the extended larger/equal/smaller if-then-else statement and include it into a for loop which shows that all three options are actually implemented in a correct manner by iterating over n from a number which is smaller 3, exactly 3 and larger than 3.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;check_value &amp;lt;- function(n){
  if(n &amp;gt;3){
    print(&amp;quot;large&amp;quot;)
  }else if(n == 3){
    print(&amp;quot;equal&amp;quot;)
  }else if(n &amp;lt;3){
    print(&amp;quot;smaller&amp;quot;)
  }
}
for(n in c(2,3,4)){
  check_value(n)
}

[1] &amp;quot;smaller&amp;quot;
[1] &amp;quot;equal&amp;quot;
[1] &amp;quot;large&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;5-extent-a-copy-of-the-above-loop-and-modify-the-loop-and-if-then-else-statement-in-such-a-way-that-the-information-on-larger-etc-is-not-printed-on-the-screen-but-saved-within-a-vector-iea-variable-which-will-hold-all-three-statements-in-the-end-print-the-content-of-this-vector-after-the-loop&#34;&gt;5. Extent a copy of the above loop and modify the loop and if-then-else statement in such a way, that the information on “larger” etc. is not printed on the screen but saved within a vector (i.e. a variable which will hold all three statements in the end). Print the content of this vector after the loop.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;v1 &amp;lt;- c()
check_value &amp;lt;- function(n){
  if(n &amp;gt;3){
    print(&amp;quot;large&amp;quot;)
  }else if(n == 3){
    print(&amp;quot;equal&amp;quot;)
  }else if(n &amp;lt;3){
    print(&amp;quot;smaller&amp;quot;)
  }
}
for(n in c(2,3,4)){
  v1 &amp;lt;- c(v1,check_value(n))
}

[1] &amp;quot;smaller&amp;quot;
[1] &amp;quot;equal&amp;quot;
[1] &amp;quot;large&amp;quot;

print(v1)

[1] &amp;quot;smaller&amp;quot; &amp;quot;equal&amp;quot;   &amp;quot;large&amp;quot;  
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;6-extent-a-copy-of-the-above-modified-loop-in-such-a-way-that-the-results-are-not-saved-in-a-vector-but-a-list-print-the-content-of-this-list-after-the-loop&#34;&gt;6. Extent a copy of the above modified loop in such a way, that the results are not saved in a vector but a list. Print the content of this list after the loop.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;l1 &amp;lt;- list()
check_value &amp;lt;- function(n){
  if(n &amp;gt;3){
    print(&amp;quot;large&amp;quot;)
  }else if(n == 3){
    print(&amp;quot;equal&amp;quot;)
  }else if(n &amp;lt;3){
    print(&amp;quot;smaller&amp;quot;)
  }
}
for(n in c(2,3,4)){
  l1[length(l1) + 1] &amp;lt;- check_value(n)
}

[1] &amp;quot;smaller&amp;quot;
[1] &amp;quot;equal&amp;quot;
[1] &amp;quot;large&amp;quot;

print(l1)

[[1]]
[1] &amp;quot;smaller&amp;quot;

[[2]]
[1] &amp;quot;equal&amp;quot;

[[3]]
[1] &amp;quot;large&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;7-change-the-above-modified-loop-in-such-a-way-that-the-iteration-is-controlled-by-a-lapply-not-by-a-for-loop-save-the-returning-information-from-the-lapply-function-in-a-variable-and-print-the-content-of-this-variable-after-the-loop&#34;&gt;7. Change the above modified loop in such a way, that the iteration is controlled by a lapply not by a for-loop. Save the returning information from the lapply function in a variable and print the content of this variable after the loop.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;l1 &amp;lt;- list()
check_value &amp;lt;- function(n){
  if(n &amp;gt;3){# testesttest
    print(&amp;quot;large&amp;quot;)
  }else if(n == 3){
    print(&amp;quot;equal&amp;quot;)
  }else if(n &amp;lt;3){
    print(&amp;quot;smaller&amp;quot;)
  }
}
values &amp;lt;- c(2,3,4)
result &amp;lt;- lapply(values, check_value)

[1] &amp;quot;smaller&amp;quot;
[1] &amp;quot;equal&amp;quot;
[1] &amp;quot;large&amp;quot;

print(result)

[[1]]
[1] &amp;quot;smaller&amp;quot;

[[2]]
[1] &amp;quot;equal&amp;quot;

[[3]]
[1] &amp;quot;large&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;8-finally-change-the-above-variable-iedo-not-modify-the-loop-anymore-but-just-include-one-more-line-in-such-a-way-that-the-content-is-not-printed-as-a-nested-list-but-a-vector-ieflatten-the-list&#34;&gt;8. Finally change the above variable (i.e. do not modify the loop anymore but just include one more line) in such a way that the content is not printed as a nested list but a vector (i.e. flatten the list).&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;check_value &amp;lt;- function(n){
  if(n &amp;gt; 3){
    return(&amp;quot;larger&amp;quot;)
  }else if(n == 3){
    return(&amp;quot;equal&amp;quot;)
  }else if(n &amp;lt; 3){
    return(&amp;quot;smaller&amp;quot;)
  }
}
values &amp;lt;- c(2,3,4)
result &amp;lt;- lapply(values, check_value)
result &amp;lt;- unlist(result)
print(result)

[1] &amp;quot;smaller&amp;quot; &amp;quot;equal&amp;quot;   &amp;quot;larger&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        <item>
        <title>Assignment 01 - Data analysis</title>
        <link>https://demo.stack.jimmycai.com/p/assignment-01-data-analysis/</link>
        <pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate>
        
        <guid>https://demo.stack.jimmycai.com/p/assignment-01-data-analysis/</guid>
        <description>&lt;h2 id=&#34;marked-assignment-hello-r-hello-github&#34;&gt;Marked Assignment: Hello R, Hello GitHub&lt;/h2&gt;
&lt;hr&gt;
&lt;h4 id=&#34;1-assign-the-value-of-five-to-a-variable-called-a-and-the-value-of-two-to-a-variable-called-b&#34;&gt;1. Assign the value of five to a variable called &lt;code&gt;a&lt;/code&gt; and the value of two to a variable called &lt;code&gt;b&lt;/code&gt;.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;a &amp;lt;- 5
b &amp;lt;- 2
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;2-compute-the-sum-difference-product-and-ratio-of-a-and-b-a-always-in-the-first-place-and-store-the-results-to-four-different-variables-called-r1-r2-r3-and-r4&#34;&gt;2. Compute the sum, difference, product and ratio of a and b (a always in the first place) and store the results to four different variables called &lt;code&gt;r1&lt;/code&gt;, &lt;code&gt;r2&lt;/code&gt;, &lt;code&gt;r3&lt;/code&gt;, and &lt;code&gt;r4&lt;/code&gt;.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;r1 &amp;lt;- a+b
r2 &amp;lt;- a-b
r3 &amp;lt;- a*b
r4 &amp;lt;- a/b
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;3-create-a-vector-v1-which-contains-the-values-stored-within-the-four-variables-from-step-2&#34;&gt;3. Create a vector &lt;code&gt;v1&lt;/code&gt; which contains the values stored within the four variables from step 2.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;v1 &amp;lt;- c(r1,r2,r3,r4)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;4-add-a-fifth-entry-to-vector-v1-which-represents-a-by-the-power-of-b-ieab&#34;&gt;4. Add a fifth entry to vector &lt;code&gt;v1&lt;/code&gt; which represents &lt;code&gt;a&lt;/code&gt; by the power of &lt;code&gt;b&lt;/code&gt; (i.e. &lt;code&gt;a**b&lt;/code&gt;).&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;v1 &amp;lt;- c(v1,a**b)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;5-show-the-content-of-vector-v1-eguse-the-print-function-or-just-type-the-variable-name-in-a-separate-row&#34;&gt;5. Show the content of vector &lt;code&gt;v1&lt;/code&gt; (e.g. use the &lt;code&gt;print&lt;/code&gt; function or just type the variable name in a separate row).&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;print(v1)

## [1]  7.0  3.0 10.0  2.5 25.0
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;6-create-a-second-vector-v2-which-contains-information-on-the-type-of-mathematical-operation-used-to-derive-the-five-results-hence-this-vector-should-have-five-entries-of-values-sum-difference&#34;&gt;6. Create a second vector &lt;code&gt;v2&lt;/code&gt; which contains information on the type of mathematical operation used to derive the five results. Hence this vector should have five entries of values &lt;em&gt;sum, difference&lt;/em&gt;,…&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;v2 &amp;lt;- c(&amp;quot;sum&amp;quot;, &amp;quot;difference&amp;quot;, &amp;quot;product&amp;quot;, &amp;quot;ratio&amp;quot;, &amp;quot;exponentiation&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;7-show-the-content-of-vector-v2&#34;&gt;7. Show the content of vector &lt;code&gt;v2&lt;/code&gt;.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;print(v2)

## [1] &amp;quot;sum&amp;quot;            &amp;quot;difference&amp;quot;     &amp;quot;product&amp;quot;        &amp;quot;ratio&amp;quot;          &amp;quot;exponentiation&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;8-combine-the-two-vectors-v1-and-v2-into-a-data-frame-called-df-each-vector-should-become-one-column-of-the-data-frame-so-you-will-end-up-with-a-data-frame-having-5-rows-and-2-columns&#34;&gt;8. Combine the two vectors &lt;code&gt;v1&lt;/code&gt; and &lt;code&gt;v2&lt;/code&gt; into a data frame called &lt;code&gt;df&lt;/code&gt;. Each vector should become one column of the data frame so you will end up with a data frame having 5 rows and 2 columns.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;df &amp;lt;- data.frame(v1,v2)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;9-make-sure-that-the-column-with-the-data-of-v1-is-named-results-and-v2-is-named-operation&#34;&gt;9. Make sure that the column with the data of &lt;code&gt;v1&lt;/code&gt; is named Results and &lt;code&gt;v2&lt;/code&gt; is named Operation.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;colnames(df) &amp;lt;- c(&amp;quot;Results&amp;quot;, &amp;quot;Operation&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;10-show-the-entire-content-of-df&#34;&gt;10. Show the entire content of &lt;code&gt;df&lt;/code&gt;.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;print(df)

##   Results      Operation
## 1     7.0            sum
## 2     3.0     difference
## 3    10.0        product
## 4     2.5          ratio
## 5    25.0 exponentiation
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
&lt;h4 id=&#34;11-show-just-the-entry-of-the-cell-in-the-second-row-and-first-column&#34;&gt;11. Show just the entry of the cell in the second row and first column.&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;print(df[2,1])

## [1] 3
&lt;/code&gt;&lt;/pre&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
