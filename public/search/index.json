[{"content":" Unmarked Assignment: Loop and Conquer 1. Implement an if-then-else statement which prints “larger” if the number provided as variable n is larger than three and “equal or smaller” otherwise. check_value \u0026lt;- function(n){\rif(n \u0026gt;3){\rprint(\u0026quot;large\u0026quot;)\r}else{\rprint(\u0026quot;equal or smaller\u0026quot;)\r}\r}\rcheck_value(2)\r[1] \u0026quot;equal or smaller\u0026quot;\r2. Extent a copy of the above statement (i.e. copy the entire if-then-else statement and include it a second time in your script in order to preserve both versions) which returns “equal” and “smaller” explicitly in addition to “larger”. check_value \u0026lt;- function(n){\rif(n \u0026gt;3){\rprint(\u0026quot;large\u0026quot;)\r}else if(n == 3){\rprint(\u0026quot;equal\u0026quot;)\r}else if(n \u0026lt;3){\rprint(\u0026quot;smaller\u0026quot;)\r}\r}\rcheck_value(2)\r[1] \u0026quot;smaller\u0026quot;\r3. Implement a if-then-else statement which prints “even” if the number provided as variable n is even and which prints “odd” otherwise. even_or_odd \u0026lt;- function(n){\rif(n %% 2 == 0){\rprint(\u0026quot;even\u0026quot;)\r}else{\rprint(\u0026quot;odd\u0026quot;)\r}\r}\reven_or_odd(5)\r[1] \u0026quot;odd\u0026quot;\r4. Copy the extended larger/equal/smaller if-then-else statement and include it into a for loop which shows that all three options are actually implemented in a correct manner by iterating over n from a number which is smaller 3, exactly 3 and larger than 3. check_value \u0026lt;- function(n){\rif(n \u0026gt;3){\rprint(\u0026quot;large\u0026quot;)\r}else if(n == 3){\rprint(\u0026quot;equal\u0026quot;)\r}else if(n \u0026lt;3){\rprint(\u0026quot;smaller\u0026quot;)\r}\r}\rfor(n in c(2,3,4)){\rcheck_value(n)\r}\r[1] \u0026quot;smaller\u0026quot;\r[1] \u0026quot;equal\u0026quot;\r[1] \u0026quot;large\u0026quot;\r5. Extent a copy of the above loop and modify the loop and if-then-else statement in such a way, that the information on “larger” etc. is not printed on the screen but saved within a vector (i.e. a variable which will hold all three statements in the end). Print the content of this vector after the loop. v1 \u0026lt;- c()\rcheck_value \u0026lt;- function(n){\rif(n \u0026gt;3){\rprint(\u0026quot;large\u0026quot;)\r}else if(n == 3){\rprint(\u0026quot;equal\u0026quot;)\r}else if(n \u0026lt;3){\rprint(\u0026quot;smaller\u0026quot;)\r}\r}\rfor(n in c(2,3,4)){\rv1 \u0026lt;- c(v1,check_value(n))\r}\r[1] \u0026quot;smaller\u0026quot;\r[1] \u0026quot;equal\u0026quot;\r[1] \u0026quot;large\u0026quot;\rprint(v1)\r[1] \u0026quot;smaller\u0026quot; \u0026quot;equal\u0026quot; \u0026quot;large\u0026quot; 6. Extent a copy of the above modified loop in such a way, that the results are not saved in a vector but a list. Print the content of this list after the loop. l1 \u0026lt;- list()\rcheck_value \u0026lt;- function(n){\rif(n \u0026gt;3){\rprint(\u0026quot;large\u0026quot;)\r}else if(n == 3){\rprint(\u0026quot;equal\u0026quot;)\r}else if(n \u0026lt;3){\rprint(\u0026quot;smaller\u0026quot;)\r}\r}\rfor(n in c(2,3,4)){\rl1[length(l1) + 1] \u0026lt;- check_value(n)\r}\r[1] \u0026quot;smaller\u0026quot;\r[1] \u0026quot;equal\u0026quot;\r[1] \u0026quot;large\u0026quot;\rprint(l1)\r[[1]]\r[1] \u0026quot;smaller\u0026quot;\r[[2]]\r[1] \u0026quot;equal\u0026quot;\r[[3]]\r[1] \u0026quot;large\u0026quot;\r7. Change the above modified loop in such a way, that the iteration is controlled by a lapply not by a for-loop. Save the returning information from the lapply function in a variable and print the content of this variable after the loop. l1 \u0026lt;- list()\rcheck_value \u0026lt;- function(n){\rif(n \u0026gt;3){# testesttest\rprint(\u0026quot;large\u0026quot;)\r}else if(n == 3){\rprint(\u0026quot;equal\u0026quot;)\r}else if(n \u0026lt;3){\rprint(\u0026quot;smaller\u0026quot;)\r}\r}\rvalues \u0026lt;- c(2,3,4)\rresult \u0026lt;- lapply(values, check_value)\r[1] \u0026quot;smaller\u0026quot;\r[1] \u0026quot;equal\u0026quot;\r[1] \u0026quot;large\u0026quot;\rprint(result)\r[[1]]\r[1] \u0026quot;smaller\u0026quot;\r[[2]]\r[1] \u0026quot;equal\u0026quot;\r[[3]]\r[1] \u0026quot;large\u0026quot;\r8. Finally change the above variable (i.e. do not modify the loop anymore but just include one more line) in such a way that the content is not printed as a nested list but a vector (i.e. flatten the list). check_value \u0026lt;- function(n){\rif(n \u0026gt; 3){\rreturn(\u0026quot;larger\u0026quot;)\r}else if(n == 3){\rreturn(\u0026quot;equal\u0026quot;)\r}else if(n \u0026lt; 3){\rreturn(\u0026quot;smaller\u0026quot;)\r}\r}\rvalues \u0026lt;- c(2,3,4)\rresult \u0026lt;- lapply(values, check_value)\rresult \u0026lt;- unlist(result)\rprint(result)\r[1] \u0026quot;smaller\u0026quot; \u0026quot;equal\u0026quot; \u0026quot;larger\u0026quot; ","date":"2023-11-07T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/assignment-02-data-analysis/","title":"Assignment 02 - Data analysis"},{"content":"Marked Assignment: Hello R, Hello GitHub 1. Assign the value of five to a variable called a and the value of two to a variable called b. a \u0026lt;- 5\rb \u0026lt;- 2\r2. Compute the sum, difference, product and ratio of a and b (a always in the first place) and store the results to four different variables called r1, r2, r3, and r4. r1 \u0026lt;- a+b\rr2 \u0026lt;- a-b\rr3 \u0026lt;- a*b\rr4 \u0026lt;- a/b\r3. Create a vector v1 which contains the values stored within the four variables from step 2. v1 \u0026lt;- c(r1,r2,r3,r4)\r4. Add a fifth entry to vector v1 which represents a by the power of b (i.e. a**b). v1 \u0026lt;- c(v1,a**b)\r5. Show the content of vector v1 (e.g. use the print function or just type the variable name in a separate row). print(v1)\r## [1] 7.0 3.0 10.0 2.5 25.0\r6. Create a second vector v2 which contains information on the type of mathematical operation used to derive the five results. Hence this vector should have five entries of values sum, difference,… v2 \u0026lt;- c(\u0026quot;sum\u0026quot;, \u0026quot;difference\u0026quot;, \u0026quot;product\u0026quot;, \u0026quot;ratio\u0026quot;, \u0026quot;exponentiation\u0026quot;)\r7. Show the content of vector v2. print(v2)\r## [1] \u0026quot;sum\u0026quot; \u0026quot;difference\u0026quot; \u0026quot;product\u0026quot; \u0026quot;ratio\u0026quot; \u0026quot;exponentiation\u0026quot;\r8. Combine the two vectors v1 and v2 into a data frame called df. Each vector should become one column of the data frame so you will end up with a data frame having 5 rows and 2 columns. df \u0026lt;- data.frame(v1,v2)\r9. Make sure that the column with the data of v1 is named Results and v2 is named Operation. colnames(df) \u0026lt;- c(\u0026quot;Results\u0026quot;, \u0026quot;Operation\u0026quot;)\r10. Show the entire content of df. print(df)\r## Results Operation\r## 1 7.0 sum\r## 2 3.0 difference\r## 3 10.0 product\r## 4 2.5 ratio\r## 5 25.0 exponentiation\r11. Show just the entry of the cell in the second row and first column. print(df[2,1])\r## [1] 3\r","date":"2023-10-31T00:00:00Z","permalink":"https://demo.stack.jimmycai.com/p/assignment-01-data-analysis/","title":"Assignment 01 - Data analysis"}]